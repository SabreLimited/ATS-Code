/** @license Copyright (c) Microsoft Corporation. All rights reserved. */
var __extends=this&&this.__extends||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];function __(){this.constructor=d}__.prototype=b.prototype;d.prototype=new __},MscrmControls;(function(MscrmControls){var Multimedia;(function(Multimedia){"use strict";var MultimediaPlayerControl=function(_super){__extends(MultimediaPlayerControl,_super);function MultimediaPlayerControl(){_super.call(this)}MultimediaPlayerControl.prototype.initCore=function(context){if(!this.supportsMediaPlayback(context)){this.appendCompatibilityErrorMessageToContainer(context.resources.getString);return}this.controlProperties=MultimediaPlayerControl.createPlaybackProperties(context,this.container,$(this.container).width(),$(this.container).width()/16*9);if(context.client.userAgent.isIos)this.createNativeVideoDomElement();else this.createEnhancedVideoDomElement();this.addUpdateSubscriptions(context);this.preventClickPropagation();this.playback.playbackViewModel.addEventListener("onLoadedMetadata",this.showPlayer.bind(this))};MultimediaPlayerControl.prototype.updateCore=function(context){if(!this.supportsMediaPlayback(context))return;if(this.controlProperties.media()!==context.parameters.url.raw){$(this.valueContainer).show();$(this.valueContainer).text(context.parameters.url.raw);$(this.container).hide()}this.setPlaybackProperties(context)};MultimediaPlayerControl.prototype.destroyCore=function(){var _this=this;if(this.isControlInitialized){if(!MscrmCommon.ControlUtils.Object.isNullOrUndefined(this.updateSubscriptions)){this.updateSubscriptions.forEach(function(subscription,index){subscription.dispose();_this.updateSubscriptions[index]=null});this.updateSubscriptions=null}if(!MscrmCommon.ControlUtils.Object.isNullOrUndefined(this.playback)){this.playback.playbackViewModel.removeEventListener("onLoadedMetadata",this.showPlayer);this.playback.disposeView(this.multimediaPlayerDomElement[1])}this.playback=null;this.controlProperties=null;this.multimediaPlayerDomElement=null;this.errorDomElement=null;$(this.container).empty()}};MultimediaPlayerControl.prototype.showDefaultLabelCore=function(context){return MscrmCommon.ControlUtils.Property.isNullOrEmpty(context.parameters.url)};MultimediaPlayerControl.prototype.supportsMediaPlayback=function(clientContext){if(clientContext.client.userAgent.isAndroid&&!clientContext.client.userAgent.isAndroidModern)return false;return true};MultimediaPlayerControl.prototype.appendCompatibilityErrorMessageToContainer=function(getString){var androidVersionNotSupportedMessage=getString(MultimediaPlayerControl.AndroidVersionNotSupportedErrorId),androidVersionNotSupportedHtmlFormat="<div>{0}</div>",androidVersionNotSupportedDivElement=$(MscrmCommon.ControlUtils.String.Format(androidVersionNotSupportedHtmlFormat,androidVersionNotSupportedMessage)).css("white-space","normal").css("line-height","1.5em");$(this.container).append(androidVersionNotSupportedDivElement)};MultimediaPlayerControl.prototype.createNativeVideoDomElement=function(){this.createPlaybackDomElement(Multimedia.MultimediaPlayerControlDomElement.nativeVideoPlayerDom,new Multimedia.NativeVideoPlayback)};MultimediaPlayerControl.prototype.createEnhancedVideoDomElement=function(){this.createPlaybackDomElement(Multimedia.MultimediaPlayerControlDomElement.videoPlayerDom,new Multimedia.VideoPlayback)};MultimediaPlayerControl.prototype.createPlaybackDomElement=function(domElement,playback){this.multimediaPlayerDomElement=$(domElement).appendTo(this.container);this.playback=playback;this.playback.initView(this.multimediaPlayerDomElement[1],this.controlProperties)};MultimediaPlayerControl.prototype.addUpdateSubscriptions=function(context){var _this=this;this.updateSubscriptions=[];var mediaUpdateSubscription=this.controlProperties.media.subscribe(function(newUrl){$(_this.container).find(MultimediaPlayerControl.urlTextSelector).text(newUrl)},this);this.updateSubscriptions.push(mediaUpdateSubscription);var disabledUpdateSubscription=this.controlProperties.isDisabled.subscribe(function(isDisabled){$(_this.container).find(MultimediaPlayerControl.playbackElementSelector).toggleClass(MultimediaPlayerControl.disabledClass,isDisabled)},this);this.updateSubscriptions.push(disabledUpdateSubscription)};MultimediaPlayerControl.prototype.showPlayer=function(){$(this.valueContainer).hide();$(this.container).show()};MultimediaPlayerControl.prototype.preventClickPropagation=function(){$(this.multimediaPlayerDomElement[1]).on(MultimediaPlayerControl.overriddenEvents,function(event){event.stopPropagation()})};MultimediaPlayerControl.prototype.setPlaybackProperties=function(context){var url=context.parameters.url.raw,shouldRefresh=this.controlProperties.isDisabled()!==context.mode.isControlDisabled||this.controlProperties.isVisible()!==context.mode.isVisible;shouldRefresh&&this.controlProperties.media(MscrmCommon.ControlUtils.String.Empty);this.controlProperties.media(url);this.controlProperties.isDisabled(context.mode.isControlDisabled);this.controlProperties.isVisible(context.mode.isVisible);this.controlProperties.width($(this.container).width());this.controlProperties.height($(this.container).width()/16*9)};MultimediaPlayerControl.createPlaybackProperties=function(context,container,width,height){var stopwatch=null;if(!MscrmCommon.ControlUtils.Object.isNullOrUndefined(context.utils.createPerformanceStopwatch))stopwatch=context.utils.createPerformanceStopwatch("CustomControl.MultimediaPlayer.LoadVideoMetadata");!MscrmCommon.ControlUtils.Object.isNullOrUndefined(stopwatch)&&stopwatch.start();var properties={fill:MultimediaPlayerControl.defaultFill,isDisabled:ko.observable(false),isVisible:ko.observable(true),width:ko.observable(width),height:ko.observable(height),maximumHeight:ko.observable(height),minimumHeight:ko.observable(height),media:ko.observable(""),showControls:true,paused:ko.observable(false),image:ko.observable(null),autoStart:ko.observable(false),loop:ko.observable(false),time:ko.observable(0),stopwatch:stopwatch};return properties};MultimediaPlayerControl.InvalidUrlMessage="Malformed URL";MultimediaPlayerControl.AndroidVersionNotSupportedErrorId="CustomControl_MultimediaPlayer_AndroidVersionNotSupported";MultimediaPlayerControl.urlTextSelector=".appmagic-url";MultimediaPlayerControl.playbackElementSelector=".appmagic-video-playback";MultimediaPlayerControl.defaultFill="rgba(69, 69, 69, 1)";MultimediaPlayerControl.disabledClass="appmagic-video-playback-disabled";MultimediaPlayerControl.overriddenEvents="change click dblclick tap dbltap swipeleft swiperight swipeup swipedown mouseup pointerup touchstart touchcancel";return MultimediaPlayerControl}(MscrmCommon.FieldControlBase);Multimedia.MultimediaPlayerControl=MultimediaPlayerControl})(Multimedia=MscrmControls.Multimedia||(MscrmControls.Multimedia={}))})(MscrmControls||(MscrmControls={}));var MscrmControls;(function(MscrmControls){var Multimedia;(function(Multimedia){"use strict";var MultimediaPlayerControlDomElement=function(){function MultimediaPlayerControlDomElement(){}MultimediaPlayerControlDomElement.nativeVideoPlayerDom='<div class="appmagic-url"></div><div class="appmagic-video-playback appmagic-video-collapse" >\t\t<!--ko with: mediaObject.template.indexOf(\'youtube-\') === 0 ? mediaObject : null -->\t\t\t<div class= "youtube-video"></div>\t\t<div class= "appmagic-video-playback-iframe-disabled" data-bind="css: { active: $parent.isDisabledDiv }"></div>\t\t<!-- /ko -->\t\t<!--ko with: mediaObject.template === \'azure\' ? mediaObject : null -->\t\t\t<div data-bind="\t\tclick: onClickPlayPauseButton,\t\tstyle: { backgroundColor: $parent.properties.fill, zIndex: $parent.isFullscreen ? MscrmControls.Multimedia.Constants.zIndex.topmost : \'auto\'\t},\tevent: { keydown: onKeyPressed } ">\t<video\t\t  class="azuremediaplayer amp-default-skin amp-big-play-centered"\twebkit-playsinline>\t</video>\t</div>\t<!-- /ko -->\t<!--ko with: mediaObject.template === \'video\' ? mediaObject : null -->\t\t<video class="appmagic-video-playback-video"\t\tdata-bind="\tclick: onClickPlayPauseButton,\tevent: {\t\tdurationchange: durationChanged.invoke,\t\tended: ended.invoke,\t\terror: error.invoke,\t\tloadedmetadata: metadataLoaded.invoke,\t\tpause: onPaused,\t\tplay: playing.invoke,\t\ttimeupdate: timeUpdated.invoke,\t},\tmediaattr: { loop: loop, muted: isMuted, volume: volume } "\tcontrols webkit-playsinline> </video>\t<div class= "appmagic-video-playback-iframe-disabled" data-bind="css: { active: $parent.isDisabledDiv }"></div>\t<!-- /ko -->\t</div>';MultimediaPlayerControlDomElement.videoPlayerDom='<div class="appmagic-url"></div><div class="appmagic-video-playback appmagic-video-collapse">\t\t<!--ko with: mediaObject.template.indexOf(\'youtube-\') === 0 ? mediaObject : null -->\t\t\t<div class= "youtube-video"></div>\t\t<div class= "appmagic-video-playback-iframe-disabled" data-bind="css: { active: $parent.isDisabledDiv }"></div>\t\t<!-- /ko -->\t\t<!--ko with: mediaObject.template === \'azure\' ? mediaObject : null -->\t\t\t<div data-bind="\t\tclick: onClickPlayPauseButton,\t\tstyle: { backgroundColor: $parent.properties.fill, zIndex: $parent.isFullscreen ? MscrmControls.Multimedia.Constants.zIndex.topmost : \'auto\'\t},\tevent: { keydown: onKeyPressed } ">\t<video\t\t  class="azuremediaplayer amp-default-skin amp-big-play-centered"\twebkit-playsinline>\t</video>\t</div>\t<!-- /ko -->\t<!--ko with: mediaObject.template === \'video\' ? mediaObject : null -->\t\t<div class="appmagic-video-playback-grid" data-bind="\tcss: { \'appmagic-video-playback-grid-hover\': controlsIsVisible, \'fullscreen-grid\': $parent.isFullscreen, \'fullscreen-grid-edge\': ($parent.isFullscreen && navigator.userAgent.indexOf(\'Edge\') !== -1)},\tstyle: { backgroundColor: $parent.properties.Fill },\tevent: { click: onClick, keydown: onKeyPressed, pointermove: onPointerMove } ">\t<video\t\t  class="appmagic-video-playback-video"\tdata-bind="\tclick: onClickPlayPauseButton,\tevent: {\t\tdurationchange: durationChanged.invoke,\t\tended: ended.invoke,\t\terror: error.invoke,\t\tloadedmetadata: metadataLoaded.invoke,\t\tpause: onPaused,\t\tplay: playing.invoke,\t\ttimeupdate: timeUpdated.invoke,\t},\tmediaattr: { loop: loop, muted: isMuted, volume: volume } "\twebkit-playsinline> </video>\t<div class="appmagic-video-playback-controls-container" data-bind="visible: showControls && !$parent.isDisabled()">\t<div class="appmagic-video-playback-button-play-pause-container">\t<div class="appmagic-video-playback-button-play-pause" data-bind="\tstyle: {\t\theight: MscrmControls.CommonAppMagic.Utilities.Converters.pxVerticalConverter($parent.properties.height / $parent.scaleFactor),\t\twidth: MscrmControls.CommonAppMagic.Utilities.Converters.pxHorizontalConverter($parent.properties.height / $parent.scaleFactor)\t},\tcss: {\t\tplaying: $parent.isPlaying,\t\tlargeIcon: $parent.isFullscreen\t},\tclick: onClickPlayPauseButton"></div>\t</div>\t<div class="appmagic-video-playback-controls" data-bind="css: { \'appmagic-video-playback-controls-hide\': $parent.hideControls }">\t<div class="appmagic-video-playback-seekbar" data-bind="\tobservableProperty: { value: seekBarValue, min: seekBarMin, max: seekBarMax },\tseekbar: true,\tevent: { pointerdown: onPlaybackSeekBarPointerDown, pointerup: onPlaybackSeekBarPointerUp, pointerout: onPlaybackSeekBarPointerUp } "></div>\t<div class="appmagic-video-playback-seekbar-controls">\t<div class="appmagic-video-playback-seekbar-current-time appmagic-video-playback-timer-label" data-bind="text: seekBarTime"> </div>\t<div class="appmagic-video-playback-seekbar-duration-seprator"> /</div>\t<div class="appmagic-video-playback-seekbar-duration appmagic-video-playback-timer-label" data-bind="text: seekBarDuration"> </div>\t<div class="appmagic-video-playback-button-volume-container">\t<div class="appmagic-video-playback-button-volume-container-parent">\t<div class="appmagic-video-playback-button-volume icon" data-bind="\tcss: { muted: isMuted },\tevent: { click: onClickVolumeButton } "></div>\t<div class="appmagic-video-playback-volume-container" data-bind="css: {\'appmagic-video-playback-volume-container-click\': isVolumeContainerVisible }">\t<div class="appmagic-video-playback-volume-top" data-bind="css: { muted: isMuted }, event: { pointerdown: onClickVolumeMuteButton }"> </div>\t<div class="appmagic-video-volume-slider-divider"> </div> \t<input class="appmagic-video-playback-slider-volume win-vertical" type="range" min="0" max="100" step="1" data-bind="value: volumeSliderValue,\tvalueUpdate: \'input\',\tattr: { min: minVolume.toString(), max: maxVolume.toString() },\tcss: { muted: isMuted } " />\t</div>\t</div>\t</div>\t<div class="appmagic-video-playback-button-fullscreen icon" data-bind="\tcss: { \'fullscreen-collapsed-icon\': $parent.isFullscreen },\tclick: $parent.onClickFullscreenButton.bind($parent)"></div>\t</div>\t</div>\t</div>\t</div>\t<!-- /ko -->\t</div>';return MultimediaPlayerControlDomElement}();Multimedia.MultimediaPlayerControlDomElement=MultimediaPlayerControlDomElement})(Multimedia=MscrmControls.Multimedia||(MscrmControls.Multimedia={}))})(MscrmControls||(MscrmControls={}));var MscrmControls;(function(MscrmControls){var Multimedia;(function(Multimedia){function getApplyBindingPromise(){return applyingBindingPromise?applyingBindingPromise.promise:WinJS.Promise.as(null)}Multimedia.getApplyBindingPromise=getApplyBindingPromise;var applyingBindingNumber=0,applyingBindingPromise=null;function initializeApplyingBindingPromiseIfNeeded(){if(!applyingBindingPromise)applyingBindingPromise=MscrmControls.CommonAppMagic.Utilities.Utility.createCompletablePromise();applyingBindingNumber++}function completeApplyingBindingPromiseIfNeeded(){WinJS.Promise.timeout(1).then(function(){applyingBindingNumber--;if(applyingBindingNumber===0){var savePromise=applyingBindingPromise;applyingBindingPromise=null;savePromise.complete()}})}var originalApplyBindings=ko.applyBindings,originalApplyBindingsToNode=ko.applyBindingsToNode,originalApplyBindingsToDescendants=ko.applyBindingsToDescendants,getMinifiedFunctionName=function(knockoutFunction){for(var a in ko)if(ko[a]===knockoutFunction)return a};ko.applyBindings=ko[getMinifiedFunctionName(ko.applyBindings)]=function(viewModel,rootNode){initializeApplyingBindingPromiseIfNeeded();originalApplyBindings(viewModel,rootNode);completeApplyingBindingPromiseIfNeeded()};ko.applyBindingsToDescendants=ko[getMinifiedFunctionName(ko.applyBindingsToDescendants)]=function(viewModel,rootNode){initializeApplyingBindingPromiseIfNeeded();originalApplyBindingsToDescendants(viewModel,rootNode);completeApplyingBindingPromiseIfNeeded()};ko.applyBindingsToNode=ko[getMinifiedFunctionName(ko.applyBindingsToNode)]=function(viewModel,options,rootNode){initializeApplyingBindingPromiseIfNeeded();originalApplyBindingsToNode(viewModel,options,rootNode);completeApplyingBindingPromiseIfNeeded()}})(Multimedia=MscrmControls.Multimedia||(MscrmControls.Multimedia={}))})(MscrmControls||(MscrmControls={}))